// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/connect/demo/eliza/v1/eliza.proto

package elizav1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/connect-demo/internal/gen/buf/connect/demo/eliza/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ElizaServiceName is the fully-qualified name of the ElizaService service.
	ElizaServiceName = "buf.connect.demo.eliza.v1.ElizaService"
)

// ElizaServiceClient is a client for the buf.connect.demo.eliza.v1.ElizaService service.
type ElizaServiceClient interface {
	// Say is a unary request demo. This method should allow for a one sentence
	// response given a one sentence request.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
	// Converse is a bi-directional request demo. This method should allow for
	// many requests and many responses.
	Converse(context.Context) *connect_go.BidiStreamForClient[v1.ConverseRequest, v1.ConverseResponse]
	// Monologue is a client-streaming request demo.  This method allows for many requests and a single response from the
	// server.  It can be used to specify a series of details and get a single acknowledgement response from Eliza.
	Monologue(context.Context) *connect_go.ClientStreamForClient[v1.MonologueRequest, v1.MonologueResponse]
	// Listen is a server-streaming request demo.  This method allows for a single request and many responses from the server.
	// It can be used to ask for details and then receive a series of responses from Eliza.
	Listen(context.Context, *connect_go.Request[v1.ListenRequest]) (*connect_go.ServerStreamForClient[v1.ListenResponse], error)
}

// NewElizaServiceClient constructs a client for the buf.connect.demo.eliza.v1.ElizaService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElizaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ElizaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &elizaServiceClient{
		say: connect_go.NewClient[v1.SayRequest, v1.SayResponse](
			httpClient,
			baseURL+"/buf.connect.demo.eliza.v1.ElizaService/Say",
			opts...,
		),
		converse: connect_go.NewClient[v1.ConverseRequest, v1.ConverseResponse](
			httpClient,
			baseURL+"/buf.connect.demo.eliza.v1.ElizaService/Converse",
			opts...,
		),
		monologue: connect_go.NewClient[v1.MonologueRequest, v1.MonologueResponse](
			httpClient,
			baseURL+"/buf.connect.demo.eliza.v1.ElizaService/Monologue",
			opts...,
		),
		listen: connect_go.NewClient[v1.ListenRequest, v1.ListenResponse](
			httpClient,
			baseURL+"/buf.connect.demo.eliza.v1.ElizaService/Listen",
			opts...,
		),
	}
}

// elizaServiceClient implements ElizaServiceClient.
type elizaServiceClient struct {
	say       *connect_go.Client[v1.SayRequest, v1.SayResponse]
	converse  *connect_go.Client[v1.ConverseRequest, v1.ConverseResponse]
	monologue *connect_go.Client[v1.MonologueRequest, v1.MonologueResponse]
	listen    *connect_go.Client[v1.ListenRequest, v1.ListenResponse]
}

// Say calls buf.connect.demo.eliza.v1.ElizaService.Say.
func (c *elizaServiceClient) Say(ctx context.Context, req *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// Converse calls buf.connect.demo.eliza.v1.ElizaService.Converse.
func (c *elizaServiceClient) Converse(ctx context.Context) *connect_go.BidiStreamForClient[v1.ConverseRequest, v1.ConverseResponse] {
	return c.converse.CallBidiStream(ctx)
}

// Monologue calls buf.connect.demo.eliza.v1.ElizaService.Monologue.
func (c *elizaServiceClient) Monologue(ctx context.Context) *connect_go.ClientStreamForClient[v1.MonologueRequest, v1.MonologueResponse] {
	return c.monologue.CallClientStream(ctx)
}

// Listen calls buf.connect.demo.eliza.v1.ElizaService.Listen.
func (c *elizaServiceClient) Listen(ctx context.Context, req *connect_go.Request[v1.ListenRequest]) (*connect_go.ServerStreamForClient[v1.ListenResponse], error) {
	return c.listen.CallServerStream(ctx, req)
}

// ElizaServiceHandler is an implementation of the buf.connect.demo.eliza.v1.ElizaService service.
type ElizaServiceHandler interface {
	// Say is a unary request demo. This method should allow for a one sentence
	// response given a one sentence request.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
	// Converse is a bi-directional request demo. This method should allow for
	// many requests and many responses.
	Converse(context.Context, *connect_go.BidiStream[v1.ConverseRequest, v1.ConverseResponse]) error
	// Monologue is a client-streaming request demo.  This method allows for many requests and a single response from the
	// server.  It can be used to specify a series of details and get a single acknowledgement response from Eliza.
	Monologue(context.Context, *connect_go.ClientStream[v1.MonologueRequest]) (*connect_go.Response[v1.MonologueResponse], error)
	// Listen is a server-streaming request demo.  This method allows for a single request and many responses from the server.
	// It can be used to ask for details and then receive a series of responses from Eliza.
	Listen(context.Context, *connect_go.Request[v1.ListenRequest], *connect_go.ServerStream[v1.ListenResponse]) error
}

// NewElizaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElizaServiceHandler(svc ElizaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/buf.connect.demo.eliza.v1.ElizaService/Say", connect_go.NewUnaryHandler(
		"/buf.connect.demo.eliza.v1.ElizaService/Say",
		svc.Say,
		opts...,
	))
	mux.Handle("/buf.connect.demo.eliza.v1.ElizaService/Converse", connect_go.NewBidiStreamHandler(
		"/buf.connect.demo.eliza.v1.ElizaService/Converse",
		svc.Converse,
		opts...,
	))
	mux.Handle("/buf.connect.demo.eliza.v1.ElizaService/Monologue", connect_go.NewClientStreamHandler(
		"/buf.connect.demo.eliza.v1.ElizaService/Monologue",
		svc.Monologue,
		opts...,
	))
	mux.Handle("/buf.connect.demo.eliza.v1.ElizaService/Listen", connect_go.NewServerStreamHandler(
		"/buf.connect.demo.eliza.v1.ElizaService/Listen",
		svc.Listen,
		opts...,
	))
	return "/buf.connect.demo.eliza.v1.ElizaService/", mux
}

// UnimplementedElizaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElizaServiceHandler struct{}

func (UnimplementedElizaServiceHandler) Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.connect.demo.eliza.v1.ElizaService.Say is not implemented"))
}

func (UnimplementedElizaServiceHandler) Converse(context.Context, *connect_go.BidiStream[v1.ConverseRequest, v1.ConverseResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.connect.demo.eliza.v1.ElizaService.Converse is not implemented"))
}

func (UnimplementedElizaServiceHandler) Monologue(context.Context, *connect_go.ClientStream[v1.MonologueRequest]) (*connect_go.Response[v1.MonologueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.connect.demo.eliza.v1.ElizaService.Monologue is not implemented"))
}

func (UnimplementedElizaServiceHandler) Listen(context.Context, *connect_go.Request[v1.ListenRequest], *connect_go.ServerStream[v1.ListenResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.connect.demo.eliza.v1.ElizaService.Listen is not implemented"))
}
